name: AWS Images

on:
  schedule:
    - cron: "45 3 * * *"
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose your deployment target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - 'production'
          - 'staging'

permissions:
  actions: write
  contents: read
  id-token: write

env:
  AWS_DEFAULT_OUTPUT: json
  AWS_PAGER: ""

jobs:
  setup:
    name: Setup workflow envs
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      bucket: ${{ steps.set-bucket.outputs.bucket }}
    steps:
      # Only set target environment to production if the workflow is triggered by
      # a scheduled execution or workflow_dispatch with production input selected
      - name: Setup target environment
        id: set-environment
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ inputs.environment }}" = "production" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Setup target bucket
        # Set target bucket according to target environment
        id: set-bucket
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ inputs.environment }}" = "production" ]; then
            echo "bucket=cloudx-json-bucket" >> $GITHUB_OUTPUT
          else
            echo "bucket=cid-bucket-staging" >> $GITHUB_OUTPUT
          fi

  list_regions:
    name: "List Regions"
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout latest tagged release
        if: env.ENVIRONMENT == 'production'
        run: |
          LATEST_RELEASE=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $LATEST_RELEASE

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::426579533370:role/github_actions_image_retriever
          role-duration-seconds: 1800
          aws-region: us-east-1

      - name: Get current list of AWS regions
        run: |
          aws ec2 describe-regions \
            --filters Name=opt-in-status,Values=opted-in,opt-in-not-required \
            > aws_regions.json

      - name: Generate a list of regions for the actions matrix
        id: set-matrix
        run: |
          export REGIONS=$( jq -r '[.Regions[].RegionName] | sort' aws_regions.json)
          echo -n 'matrix={"region": ' >> $GITHUB_OUTPUT
          echo -n $REGIONS >> $GITHUB_OUTPUT
          echo '}' >> $GITHUB_OUTPUT

  list_images:
    name: "List Images"
    needs: list_regions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix: ${{fromJSON(needs.list_regions.outputs.matrix)}}
    env:
      REGION: ${{ matrix.region }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::426579533370:role/github_actions_image_retriever
          role-duration-seconds: 1800
          aws-region: us-east-1

      - name: Write region data
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            aws --region=${REGION} ec2 describe-images \
              --filters Name=is-public,Values=true | \
              jq -c '.Images | sort_by(.ImageId)' > ${REGION}.json
            zstd -v ${REGION}.json

      - name: Store image data in artifact
        uses: actions/upload-artifact@v3
        with:
          name: "aws"
          path: "${{ env.REGION }}.json.zst"

  upload_data:
    name: "Upload Data"
    runs-on: ubuntu-latest
    needs: [list_images, setup]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}      
      BUCKET: ${{ needs.setup.outputs.bucket }}      
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Download image data artifacts
        uses: actions/download-artifact@v3
        with:
          path: raw

      - name: Install awscli v2
        uses: unfor19/install-aws-cli-action@v1

      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v2
        if: env.ENVIRONMENT == 'production'
        with:
          role-to-assume: arn:aws:iam::426579533370:role/github_actions_image_retriever
          role-duration-seconds: 1800
          aws-region: us-east-1

      - name: Configure AWS credentials for staging
        uses: aws-actions/configure-aws-credentials@v2
        if: env.ENVIRONMENT == 'staging'
        with:
          role-to-assume: arn:aws:iam::426579533370:role/github_actions_cloud_image_directory_staging
          role-duration-seconds: 1800
          aws-region: us-east-1
            

      - name: Decompress artifacts
        run: |
          pushd raw/aws
            zstd -vd --rm *
          popd

      - name: Upload raw data to S3
        run: |
          aws s3 sync \
            --acl public-read \
            --delete \
            --no-progress \
            --content-type application/json \
            $(pwd)/raw/aws/ s3://${BUCKET}/raw/aws/

  launch_parser:
    name: "Launch parser"
    runs-on: ubuntu-latest
    needs: [upload_data]
    steps:
      - uses: "actions/checkout@v3"

      - name: Launch the parser workflow
        run: gh workflow run parse.yml
        env:
          GH_TOKEN: ${{ github.token }}

